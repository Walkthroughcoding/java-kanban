package manager;

import model.Task;
import model.EpicTask;
import model.Subtask;
import model.enums.StatusEnum;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import java.time.Duration;
import java.time.LocalDateTime;

import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

public class InMemoryTaskManagerTest {

    private InMemoryTaskManager taskManager;

    @BeforeEach
    void setUp() {
        taskManager = new InMemoryTaskManager(); // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
    }

    @Test
    void addNewTask() {
        Task task = new Task("Task 1", "Description 1", StatusEnum.NEW,
                     Duration.ofMinutes(60), LocalDateTime.now());
        taskManager.addTask(task);
        Task retrievedTask = taskManager.getAnyTask(task.getId());

        assertNotNull(retrievedTask, "–ó–∞–¥–∞—á–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å null.");
        assertEquals(task, retrievedTask, "–î–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è –∏ –ø–æ–ª—É—á–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å.");
    }

    @Test
    void addNewEpicWithSubtasks() {
        EpicTask epic = new EpicTask("Test Epic", "Test Epic Description");
        taskManager.addEpic(epic);

        Subtask subtask = new Subtask("Test Subtask", "Test Subtask Description", StatusEnum.NEW,
                Duration.ofMinutes(45), LocalDateTime.now().plusMinutes(30), epic.getId());

        taskManager.addSubtask(subtask); // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∑–∞–¥–∞—á—É –≤ –º–µ–Ω–µ–¥–∂–µ—Ä

        EpicTask retrievedEpic = (EpicTask) taskManager.getAnyTask(epic.getId());
        List<Subtask> subtasks = taskManager.getSubtasksOfEpic(epic.getId());

        assertNotNull(retrievedEpic, "–≠–ø–∏–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å null.");
        assertEquals(1, subtasks.size(), "–≠–ø–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–¥–Ω—É –ø–æ–¥–∑–∞–¥–∞—á—É.");
        assertEquals(subtask, subtasks.get(0), "–ü–æ–¥–∑–∞–¥–∞—á–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–π.");
    }

    @Test
    void cannotAddSubtaskToNonExistingEpic() {
        Subtask subtask = new Subtask("Orphan Subtask", "Should not be added", StatusEnum.NEW,
                Duration.ofMinutes(45), LocalDateTime.now().plusMinutes(10), 999); // ‚úÖ –î–æ–±–∞–≤–∏–ª–∏ Duration –∏ LocalDateTime

        taskManager.addSubtask(subtask);
        assertNull(taskManager.getAnyTask(subtask.getId()), "–ü–æ–¥–∑–∞–¥–∞—á–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É —ç–ø–∏–∫—É.");
    }

    @Test
    void taskEqualityById() {
        Task task1 = new Task("Task 1", "Description 1", StatusEnum.NEW, Duration.ofMinutes(60), LocalDateTime.now());
        Task task2 = new Task("Task 1", "Description 1", StatusEnum.NEW, Duration.ofMinutes(60), LocalDateTime.now());

        assertEquals(task1, task2, "–ó–∞–¥–∞—á–∏ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–≤–Ω—ã.");
    }

    @Test
    void epicStatusUpdatesWithSubtasks() {
        EpicTask epic = new EpicTask("Test Epic", "Test Epic Description");
        taskManager.addEpic(epic);

        Subtask subtask1 = new Subtask("Subtask 1", "Description", StatusEnum.NEW,
                Duration.ofMinutes(30), LocalDateTime.now().plusMinutes(10), epic.getId());
        Subtask subtask2 = new Subtask("Subtask 2", "Description", StatusEnum.DONE,
                Duration.ofMinutes(30), LocalDateTime.now().plusMinutes(40), epic.getId());

        // üîπ –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∑–∞–¥–∞—á–∏ –≤ taskManager, –∏–Ω–∞—á–µ —Å—Ç–∞—Ç—É—Å —ç–ø–∏–∫–∞ –Ω–µ –æ–±–Ω–æ–≤–∏—Ç—Å—è!
        taskManager.addSubtask(subtask1);
        taskManager.addSubtask(subtask2);

        EpicTask retrievedEpic = (EpicTask) taskManager.getAnyTask(epic.getId());
        assertEquals(StatusEnum.IN_PROGRESS, retrievedEpic.getStatus(),
                "–≠–ø–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å IN_PROGRESS, –µ—Å–ª–∏ –µ–≥–æ –ø–æ–¥–∑–∞–¥–∞—á–∏ –∏–º–µ—é—Ç —Ä–∞–∑–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã.");
    }

    @Test
    void deleteTaskRemovesTask() {
        Task task = new Task("Test Task", "Description", StatusEnum.NEW,
                Duration.ofMinutes(60), LocalDateTime.now()); // ‚úÖ –î–æ–±–∞–≤–∏–ª–∏ Duration –∏ LocalDateTime

        taskManager.addTask(task);
        taskManager.deleteTask(task.getId());

        assertNull(taskManager.getAnyTask(task.getId()), "–£–¥–∞–ª—ë–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å.");
    }

    @Test
    void deleteSubtaskUpdatesEpic() {
        EpicTask epic = new EpicTask("Test Epic", "Description");
        taskManager.addEpic(epic);

        Subtask subtask = new Subtask("Test Subtask", "Description", StatusEnum.DONE, 
                              Duration.ofMinutes(20), LocalDateTime.now().plusMinutes(15), epic.getId());        taskManager.addSubtask(subtask);

        taskManager.deleteSubtask(subtask.getId());
        EpicTask retrievedEpic = (EpicTask) taskManager.getAnyTask(epic.getId());
        assertEquals(StatusEnum.NEW, retrievedEpic.getStatus(), "–≠–ø–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å NEW –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–¥–∑–∞–¥–∞—á.");
    }

    @Test
    void shouldUpdateTaskFields() {
        Task task = new Task("Old Name", "Old Description", StatusEnum.NEW, Duration.ofMinutes(90), LocalDateTime.now());
        taskManager.addTask(task);

        task.setTitle("New Name");
        task.setDescription("New Description");
        taskManager.updateTask(task);

        Task updatedTask = taskManager.getAnyTask(task.getId());
        assertEquals("New Name", updatedTask.getTitle(), "–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è."); // –ü—Ä–æ–≤–µ—Ä—è–µ–º title
        assertEquals("New Description", updatedTask.getDescription(), "–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–æ–ª–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è."); // –ü—Ä–æ–≤–µ—Ä—è–µ–º description
    }
}